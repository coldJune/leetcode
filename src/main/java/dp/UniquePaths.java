package dp;

/**
 * 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
 *
 * 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。
 *
 * 问总共有多少条不同的路径？
 * ---------------------------------------------
 * |start｜      |     |     |     |     |     |
 * ---------------------------------------------
 * |     ｜      |     |     |     |     |     |
 * ---------------------------------------------
 * |     ｜      |     |     |     |     | end |
 * ---------------------------------------------
 *
 *
 * 例如，上图是一个7 x 3 的网格。有多少可能的路径？
 *
 * 说明：m 和 n 的值均不超过 100。
 *
 * 示例 1:
 *
 * 输入: m = 3, n = 2
 * 输出: 3
 * 解释:
 * 从左上角开始，总共有 3 条路径可以到达右下角。
 * 1. 向右 -> 向右 -> 向下
 * 2. 向右 -> 向下 -> 向右
 * 3. 向下 -> 向右 -> 向右
 * 示例 2:
 *
 * 输入: m = 7, n = 3
 * 输出: 28
 *
 */
public class UniquePaths {
    public static void main(String[] args) {
        int m = 3;
        int n = 2;
        System.out.println(uniquePaths(m, n));
    }

    /**
     * 采用动态规划的思路
     * 假设是一个3x3的网格可以的得到
     *  * ---------------------
     *  * |start｜  1   |  1  |
     *  * ---------------------
     *  * |  1  ｜  2   |  3  |
     *  * ---------------------
     *  * |  1  ｜  3   | end |
     *  * ---------------------
     *
     *  可以得到step[i][j]=step[i-1][j]+step[i][j-1]
     *  step[0][j]=1
     *  step[i][0]=1
     *
     *  根据此表达式可以对原问题进行求解
     * @param m
     * @param n
     * @return
     */
    private static int uniquePaths(int m, int n) {
        int[][] step = new int[m][n];
        for(int i=0;i<m;i++){
            step[i][0]=1;
        }
        for(int i=0;i<n;i++){
            step[0][i]=1;
        }
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                step[i][j]=step[i][j-1]+step[i-1][j];
            }
        }
        return step[m-1][n-1];
    }
}
